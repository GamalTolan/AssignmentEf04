// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using AssignmentEf04.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace AssignmentEf04.Context
{
    public partial class NORTHWNDContext
    {
        private INORTHWNDContextProcedures _procedures;

        public virtual INORTHWNDContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new NORTHWNDContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public INORTHWNDContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class NORTHWNDContextProcedures : INORTHWNDContextProcedures
    {
        private readonly NORTHWNDContext _context;

        public NORTHWNDContextProcedures(NORTHWNDContext context)
        {
            _context = context;
        }

        public virtual async Task<List<GetEmployeesByDateRangeResult>> GetEmployeesByDateRangeAsync(DateOnly? beginDate, DateOnly? endDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BeginDate",
                    Value = beginDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployeesByDateRangeResult>("EXEC @returnValue = [dbo].[GetEmployeesByDateRange] @BeginDate = @BeginDate, @EndDate = @EndDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Sp_GetCustomerOrderHistoryResult>> Sp_GetCustomerOrderHistoryAsync(string customerID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 50,
                    Value = customerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Sp_GetCustomerOrderHistoryResult>("EXEC @returnValue = [dbo].[Sp_GetCustomerOrderHistory] @CustomerID = @CustomerID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SP_UpdateProductPricesResult>> SP_UpdateProductPricesAsync(int? categoryID, decimal? percentage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CategoryID",
                    Value = categoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Percentage",
                    Precision = 5,
                    Scale = 2,
                    Value = percentage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SP_UpdateProductPricesResult>("EXEC @returnValue = [dbo].[SP_UpdateProductPrices] @CategoryID = @CategoryID, @Percentage = @Percentage", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
